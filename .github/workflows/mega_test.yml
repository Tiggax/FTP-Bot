# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Run x games games ( ಠ ͜ʖಠ)

on:
  workflow_dispatch:
    inputs:
      number:
        description: 'Number of tests'
        required: true
        type: choice
        options:
          - '30'
          - '50'
          - '100'
          - '1000'
        default: '30'

jobs:
  generate_range:
    runs-on: ubuntu-latest
    outputs:
      range: ${{ steps.range.outputs.range }}
    steps:
      - uses: actions/checkout@v3
      - name: Generate range
        id: range
        run: echo "range=[ $(seq -s ', ' 0 $(( ${{ inputs.number }} - 1 )) ) ]" >> $GITHUB_OUTPUT
        
  test_game:

    runs-on: ubuntu-latest
    needs: generate_range
    strategy:
      matrix:
        test: ${{ needs.generate_range.outputs.range }}
        

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - uses: hustcer/setup-nu@v3.8
      with:
        version: "0.88"
    - name: Create Class 1
      run: javac Player1/*.java
    - name: Create Class 2
      run: javac Player2/*.java
    - name: Create Class 3
      run: javac Player3/*.java
    - name: Create Class 4
      run: javac Player4/*.java

    - name: Run Game
      shell: nu {0}
      run: try { java -jar Game.jar --gui=false Player1 Player2 Player3 Player4 out> game${{ matrix.test }}.log } catch {}
      continue-on-error: true
      
    - name: Save Game log
      uses: actions/upload-artifact@v3
      with:
        name: games
        path: game${{ matrix.test }}.log
        
    - name: Determine game
      shell: nu {0}
      run: |
        open game${{ matrix.test }}.log --raw 
        | lines
        | last 72
        | split list ""
        | each {|playr|
          $playr 
          | parse "{key}: {val}"
          | transpose -r
          | into record
        }
        | save result${{ matrix.test }}.nuon
        print (open result${{ matrix.test }}.nuon)
    
    - name: Save result
      uses: actions/upload-artifact@v3
      with:
        name: results
        path: result${{ matrix.test }}.nuon
        
    - name: Show winner
      shell: nu {0}
      run: |
        open result${{ matrix.test }}.nuon
        | where survive == "true"
    - name: New Kids on the block won?
      shell: nu {0}
      run: |
        let winners = (open result${{ matrix.test }}.nuon
        | where survive == "true")

        if (["Player1" "Player2" ] | any {|p| $p in $winners.STAT }) {
        print $"${{ matrix.test }}: Success ($winners.STAT) won"
        } else {
        print $"${{ matrix.test }}: fail! ($winners.STAT) won"
        }

  generate_report:
    needs: test_game
    runs-on: ubuntu-latest

    steps:
      - uses: hustcer/setup-nu@v3.8
        with:
          version: "0.88"

      - name: Get Reports
        uses: actions/download-artifact@v3
        with:
          name: results
          
      - name: Create summary file
        shell: nu {0}
        run: |
          "" | save summary.md
          
      - name: generate Data
        shell: nu {0}
        run: |
          ls result*.nuon
          | get name
          | each {|run|
            open $run
          }
          | save data.nuon
      
      
      - name: Create runs results table
        shell: nu {0}
        run: |
          
          mut summary = (open summary.md --raw)
          let data = (open data.nuon)
          
          $summary ++= "\n# Test summary\n<table>\n<tr>"
          $summary ++= ($data
          | enumerate
          | each {|i|
            mut out = ""
            if (($i.index mod 5 == 0) and $i.index != 0) { 
              $out ++= "</tr><tr>"
            }
            
            $out ++= $"<td>\n\nRun: ($i.index)\n($i.item 
            | select STAT survive 
            | to md )\n</td>"
            
            $out
          })
          $summary ++= "</tr></table>\n\n# Data\n\n"

          $summary | save summary.md --raw -f

      
      - name: Generate w/l graph
        shell: nu {0}
        run: |
          
          mut summary = (open summary.md --raw)
          let data = (open data.nuon)
          
          let grouped = ($data
          | enumerate
          | each {|i|
            $i.item | select STAT survive
            | upsert game $i.index
          }
          | flatten
          | into value
          )
          
          let players = ($grouped
          | where survive
          | group-by STAT
          | items {|k,v|
           {$k: ($v | length)}
          }
          | into record
          | flatten
          | into record)

          let sum = ${{ inputs.number }}
          $summary ++= "|Player| Wins :white_check_mark: vs. Loses :x: |:white_check_mark: count|:x: count|\n|-|-|-|-|"
          $summary ++= ($players
          | items {|k,v|
            let wins = (""| fill -c "█" -w (($v / $sum ) * 120 | math round))
            let losses = (""| fill -c "░" -w (((${{ inputs.number }} - $v) / $sum ) * 120 | math round))
            $"|($k)|($wins)($losses)|($v)|(${{ inputs.number }} - $v)|"
          })
          
          $summary | save summary.md --raw -f

      
      - name: add raw data
        shell: nu {0}
        run: |
          
          mut summary = (open summary.md --raw)
          let data = (open data.nuon)
          
          $summary ++= ($data
          | enumerate
          | each {|i|
            $"
            ## Run ($i.index) data
            ($i.item | to md)
            "})

          $summary | save summary.md --raw -f

      
      - name: Generate summary
        shell: nu {0}
        run: |
          
          mut summary = (open summary.md --raw)
          let data = (open data.nuon)
          $summary 
            | str replace -a "true" ":white_check_mark:" 
            | str replace -a "false" ":x:"
            | save --raw summary.md -f
            
      - name: export to bash env
        run: cat summary.md >>  $GITHUB_STEP_SUMMARY

          
